# from 爬虫闯关.tools.chaojiying import get_code
# from 爬虫闯关.tools.tx_orc import get_tencent_reg
from fontTools.ttLib import TTFont
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
from PIL import Image
import base64
import time
import re
import os
from io import BytesIO

from Chen_someone import model

# 字体转换
def font_switch(base_info, number_info):
    page_one = base_info
    b=base64.b64decode(page_one)
    with open('new_page.ttf','wb')as f:
        f.write(b)
    font=TTFont('local.ttf')    #打开本地字体文件local.ttf
    # font.saveXML('local.xml')   #将ttf文件转化成xml格式并保存到本地，主要是方便我们查看内部数据结构
    obj_list1=font.getGlyphNames()[1:]   #获取所有字符的对象，去除第一个
    uni_list1=font.getGlyphOrder()[1:] #获取所有编码，去除前1个
    #手动确认编码和数字之间的对应关系，保存到字典中
    dict={
        'zero':1,
        'one':0,
        'two':6,
        'three':7,
        'four':3,
        'five':8,
        'six':9,
        'seven':4,
        'eight':5,
        'nine':2,

    }

    # 网页新下载的
    font2=TTFont('new_page.ttf')  # 打开新下载的字体文件
    obj_list2=font2.getGlyphNames()[1:]   #获取所有字符的对象，去除第一个
    uni_list2=font2.getGlyphOrder()[1:] #获取所有编码，去除前1个
    new_dict= {}
    for uni2 in uni_list2:
        obj2=font2['glyf'][uni2]  #获取编码uni2在new_page.ttf中对应的对象
        for uni1 in uni_list1:
            obj1=font['glyf'][uni1]
            if obj1==obj2:
                new_dict[f'{uni2}'] = dict[uni1]
                # print(uni2,dict[uni1])
    # 得到字体转化后的真正值
    print(new_dict)

    #TODO 将传进来的数字转化
    number = number_info
    # 列表
    lists = [
        'zero',
        'one',
        'two',
        'three',
        'four',
        'five',
        'six',
        'seven',
        'eight',
        'nine',
    ]
    new_number = sum([int(''.join([str(new_dict[lists[int(n)]]) for n in num])) for num in number])
    return new_number

def font_switch_2(base_info, number_info):
# def font_switch_2():
    page_one = base_info
    # print(page_one)
    # number_info = ['腋掌消', '灰吹旺', '腋窿灰', '腋窿吹', '烃烃搏', '烃盾腋', '灰吹消', '窿掌', '旺腋', '灰旺搏', '腋吹烃', '灰腋腋']
    # page_one = ''
    # local = 'AAEAAAAKAIAAAwAgT1MvMkEnQdAAAAEoAAAAYGNtYXAAXAC6AAABpAAAAEhnbHlmdUQ+YgAAAgQAAAPWaGVhZBgiXbIAAACsAAAANmhoZWEHCgOTAAAA5AAAACRobXR4BwEBNgAAAYgAAAAabG9jYQTKBcIAAAHsAAAAGG1heHAAEQA4AAABCAAAACBuYW1lQTDOUQAABdwAAAGVcG9zdACEAHQAAAd0AAAAOAABAAAAAQAAXo8dvF8PPPUAAwPoAAAAANq5jO0AAAAA2rmM7QAU/4gDhANwAAAAAwACAAAAAAAAAAEAAANw/4gAAAPoABQAIAOEAAEAAAAAAAAAAAAAAAAAAAACAAEAAAALADYABQAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAwJTAZAABQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAPz8/PwAAADAAOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAD6ABkAisAMQBYACgAHQAUABwAOAAxAC0ALAAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAA0AAAABAAEAAEAAAA5//8AAAAw//8AAAABAAQAAAACAAEABwAIAAQACQAKAAUABgADAAAALABTAGkAjwDGAOgBGAFNAWQBswHrAAUAZP+IA4QDcAADAAYACQAMAA8AABMhESEBIQEBEQkDJwEBZAMg/OACzv2EAT4BXv7CAR7+wv7CIAE+/sIDcPwYA7b+Z/4+AzL+Z/4+AZn+ZykBmQGZAAACADH/8wH6AusADwAXAAA3JjU0NzYzMhcWFRQHBiMiExAjIhEQMzJvPj47bGs7Pj47a2v2i4yMi1Jku7tiXV5iurtkXwF+ATD+0P7LAAABAFgAAAHqAt0ACwAANzMRIzU2NzMRMxUhWKOCWz1Gk/5uTAIjOhEj/W9MAAEAKAAAAfkC6wAWAAA3ADU0JyYjIgcnNjMyFxYVFAE2MzMVISwBUCEkQlFHNWR0Yjo5/uFZH8v+MzYBJrNCJilVNGw7O2O6/vAHTwABAB3/8wHzAusAJQAANzcWMzI3NjU0IzUyNTQnJicGByc2MzIXFhUUBxUWFxYVFAcGIyIdLlBmQikq5MshIjlSRjFfbl86PINEKy1FQWWPVzxUJSU+k0aMNSAfAgNGOlgwMlaAMQQQLzNIYDo3AAIAFAAAAgsC3QAHABIAAAE1NDcjBgcHBSMVIzUhNQEzETMBUwYEGCOnAZhhV/7BATFlYQET4RNyMDz6ScrKPAHX/jYAAQAc//MB9QLdAB4AADc3FjMyNzY1NCcmIyIHJxMhFSEHNjMyFxYVFAcGIyIcLVFjQiwuKSlGOUExFwFl/usSNDlhO0FJRWKIVDxRLjFOTi0sKx4BV07UHTg+c3RGQgAAAgA4//MB/wLrAAkAIgAAJTY1NCMiBxYzMhMmIyIDNjMyFxYVFAcGIyInJjU0NzYzMhcBhSSEVEIRjTVeLki4BUleXzU3PjxYbkFGUkh1ZUZoL0qiXusCLTj+z1k6PHBoREJbYLDKaFtLAAEAMQAAAfwC3QAKAAAzEhMhNSEVBgcGB8YRvf6dAct6LiYJAYYBCU43nZ2D6QADAC3/8wH9AugAGQAnADUAADcmNTQ3NSY1NDc2MzIXFhUUBxUWFRQHBiMiEzQnJiMiBwYVFBcWFzYDNjU0JyYnBhUUFxYzMm9Ch2M5OVdcNzZifD9BZmXjISM5MyAhMiNQTBYnOiRkZCwrQj8qN1WBSQVEZVM0MzY1VmVMBUh4UTY3Ai84JSYhITU7KRwgQ/6JIjdCLBsoQGY6JyYAAAIALP/zAfQC6wALACQAAAEmIyIHBhUUFxYzMgcWMzITBiMiJyY1NDc2MzIXFhUUBwYjIicBng+RNSMkISJAVO0ySa8JSWBeNTc+PFhuQkZRR3JoSAG85y0vSkwrLOM4ATJbOzxwaERCV12p0WxeSwAAAAAADACWAAEAAAAAAAAAFAAAAAEAAAAAAAEACQAUAAEAAAAAAAIABwAdAAEAAAAAAAUACwAkAAEAAAAAAAYAEQAvAAEAAAAAAAsAFQBAAAMAAQQJAAAAKABVAAMAAQQJAAEAEgB9AAMAAQQJAAIADgCPAAMAAQQJAAUAFgCdAAMAAQQJAAYAIgCzAAMAAQQJAAsAKgDVQ3JlYXRlZCBieSBHbGlkZWRTa3lHbGlkZWRTa3lSZWd1bGFyVmVyc2lvbiAxLjBHbGlkZWRTa3ktUmVndWxhcmh0dHA6Ly9nbGlkZWRza3kuY29tLwBDAHIAZQBhAHQAZQBkACAAYgB5ACAARwBsAGkAZABlAGQAUwBrAHkARwBsAGkAZABlAGQAUwBrAHkAUgBlAGcAdQBsAGEAcgBWAGUAcgBzAGkAbwBuACAAMQAuADAARwBsAGkAZABlAGQAUwBrAHkALQBSAGUAZwB1AGwAYQByAGgAdAB0AHAAOgAvAC8AZwBsAGkAZABlAGQAcwBrAHkALgBjAG8AbQAvAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAABQAEwAcABcAGgAbABUAFgAYABk='
    b=base64.b64decode(page_one)

    with open('new_page_2.ttf','wb')as f:
        f.write(b)
    font=TTFont('local_2.ttf')    #打开本地字体文件local.ttf
    # font.saveXML('local_2.xml')   #将ttf文件转化成xml格式并保存到本地，主要是方便我们查看内部数据结构
    obj_list1=font.getGlyphNames()[1:]   #获取所有字符的对象，去除第一个
    uni_list1=font.getGlyphOrder()[1:11] #获取所有编码，筛选出想要的值
    print(uni_list1)
    #手动确认编码和数字之间的对应关系，保存到字典中
    dict={
        'uni638C':0,
        'uni814B':1,
        'uni7070':2,
        'uni70C3':3,
        'uni640F':4,
        'uni5439':5,
        'uni76FE':6,
        'uni65FA':7,
        'uni6D88':8,
        'uni7ABF':9,
    }

    # 网页新下载的
    font2=TTFont('new_page_2.ttf')  # 打开新下载的字体文件
    font2.saveXML('new_page_2.xml')
    obj_list2=font2.getGlyphNames()[1:11]   #获取所有字符的对象，去除第一个
    uni_list2=font2.getGlyphOrder()[1:11] #获取所有编码，筛选出想要的值
    print(obj_list2)
    print(uni_list2)
    new_dict = {}

    new_dict= {}
    for uni2 in uni_list2:
        obj2=font2['glyf'][uni2]  #获取编码uni2在new_page.ttf中对应的对象
        # print(obj2)
        for uni1 in uni_list1:
            obj1=font['glyf'][uni1]
            # print(f'{obj1 }  { obj2}')
            if obj1==obj2:
                try:
                    new_dict[f'{uni2}'] = dict[uni1]
                except:
                    pass
                print(uni2,dict[uni1])
    # 得到字体转化后的真正值
    print(f'===============================')
    # print(f'new_dict___{new_dict}')
    # TODO 将传进来的数字转化
    number = number_info
    print(number)
    str_all = []
    for i in number:
        str_1 = ''
        for j in i:
            new_key = ascii(j).upper()
            new_key = new_key.replace(r'U', 'uni').replace(r'\uni', 'uni').replace("'", "")
            # print(new_key)
            uni_1 = str(uni_list2.index(new_key))
            str_1 += uni_1
        str_all.append(int(str_1))
    print(str_all)


    # number_list = [int(''.join([str(new_dict[ascii(n).upper().replace(r'U','uni').replace(r'\uni','uni').replace("'","")]) for n in num])) for num in number]
    # print(number_list)
    new_number = sum(str_all)
    return new_number


def re_value(content,name):
    '''
    :return: 返回value
    '''

    presult1 = re.compile(name)
    value_1 = presult1.findall(content)
    return value_1

def get_css_style(style_list, num_dict):
    style_list = style_list
    new_dict = {}
    for i in style_list:
        if 'left:' in i[1]:
            key_ = i[0]
            value_ = i[1].split(':')[1].replace("em", '')
            new_dict[key_] = value_
            # continue
        elif 'content:' in i[1]:
            key_ = i[0]
            value_ = i[1].split('content:"')[1].replace('"', '')
            new_dict[key_] = value_
        elif 'width:1em' in i[1]:
            key_ = i[0]
            if (key_, 'margin-right:-1em') not in style_list and (key_, 'position:relative') not in style_list:
                value_ = i[1]
                new_dict[key_] = value_
    print(f'new_dict : {new_dict}') #
    num_dict = num_dict
    for i in num_dict:
        for j in i:
            if j  not in new_dict:
                del i[j]
                break
    print(num_dict)
    list_1 = []
    for i in num_dict:
        # print(i)
        dict_1 = {}
        num = 0
        end_num = ''
        for j in i:
            # print(j)
            if i[j] ==None:
                # i[j] = new_dict[j]
                end_num = new_dict[j]
            elif new_dict[j] == 'width:1em':
                dict_1[num] = i[j]
            else:
                dict_1[num + int(new_dict[j])] = i[j]
            num += 1
        item_2 = sorted(dict_1.keys())

        for i in item_2:
            # print(i)
            end_num += dict_1[i]
        list_1.append(end_num)
    print(f'本页数字为： {list_1}')
    # return sum([int(i) for i in list_1])
    return list_1

def check_list(end_list):
    print(end_list)
    print(len(end_list))
    if len(end_list) < 10:
        print('缺少数，补上占位')
        for i in  range(len(end_list)):
            if end_list[0] <= -10:
                print('缺少0')
                end_list.insert(i, -3)
                print(f'新的列表： {end_list}')
                check_list(end_list)
                break

            elif end_list[i-1] > end_list[i] and end_list[i] < end_list[i-1] -15:
                print(f'======================缺少{i}======================================')
                end_list.insert(i,end_list[i-1]-15)
                check_list(end_list)
                break
        # if len(end_list) <10:
        #     print(end_list)
        #     print('缺少9，添加上')
        #     end_list.insert(9, end_list[8] - 4)


    return end_list

def xue_bi_1(base_info,num_list):
# def xue_bi_1():
    xue_bs4 = base_info.split('base64,')[1].split(') ')[0]
    css_stely_list =re.findall("\.(.*?) { background-position-x:(.*?)px }",base_info)
    print(f'css_stely_list {css_stely_list}')
    dict_1 = {}
    list_1 = []
    for i in css_stely_list:
        dict_1[i[0]] = i[1]
        list_1.append(i[1])
    new_list = []
    for i in  list_1:
        if int(i) not in new_list:
            new_list.append(int(i))
    end_list = sorted(new_list,reverse=True)

    end_list = check_list(end_list)
    # if len(end_list) == 7:
        # input('============')
    dict_2 = {}
    for i in end_list:
        dict_2[str(i)] = end_list.index(i)


    # 开始获取数字
    style_lists =  num_list
    new_number_list = []
    for i in  style_lists:
        number = ''
        for j in  i:
            j = j.replace(' sprite','')
            num = str(dict_2[dict_1[j]])
            number += num
        new_number_list.append(int(number))
    print(f'new_number_list :{new_number_list}')

    return new_number_list

def discern_number(bs64,coordinate):

    # bs64 = ''
    img = Image.open(BytesIO(base64.b64decode(bs64)))
    box = (0, 39, 18, 59)
    im = img.crop(coordinate).convert('L')
    data = (255 - np.array(im))
    x, y = data.shape
    if 20 - x:
        data = np.insert(data, 0, np.zeros((20 - x, 1)), 0)
    if 20 - y:
        data = np.insert(data, 0, np.zeros((20 - y, 1)), 1)

    def predict(data, num):  # num为一次预测的数量，data为转化后的（num,20,20）的数组
        return model.predict_classes(data.reshape((num, 20, 20, 1)))

    result = predict(data, 1)[0]
    return str(result)

def orc(j,base_info,xue_bs4):
    # j = 'mxD0yXOqC' # abs(int(a))
    set_x = abs(int(re.findall(f"\.{j} . background-position-x:(.*?)px", base_info)[0]))
    set_y = abs(int(re.findall(f"\.{j} . background-position-y:(.*?)px", base_info)[0]))
    set_w = abs(int(re.findall(f"\.{j} . width:(.*?)px", base_info)[0]))
    set_h = abs(int(re.findall(f"\.{j} . height:(.*?)px", base_info)[0]))
    # 裁剪出 当前css所对应的数字图片
    # img = Image.open(r"E:\chen_yi\爬虫闯关\img\13.png")
    coordinate = (set_x, set_y, set_x + set_w,set_h + set_y)
    # cropped = img.crop((set_x, set_y, set_x + set_w,set_h + set_y))  # (left, upper, right, lower) #TODO left = x ,upper = y , right = x + w , lower = y +h
    # print(coordinate)
    # save_path = r"E:\chen_yi\爬虫闯关\img\new_number.png"
    # cropped.save(save_path)
    nuber = discern_number(xue_bs4,coordinate)
    if nuber == 'o':
        nuber = 0
    return nuber

def xue_bi_2(base_info,num_list):
    xue_bs4 = base_info.split('base64,')[1].split(') ')[0]
    # print(xue_bs4)
    css_stely_list = re.findall("\.(.*?) { background-position-x:(.*?)px }", base_info)
    bs4 = base64.b64decode(xue_bs4)
    with open(r'E:\small_bike\爬虫闯关\img\13.png','wb')as fp:
        fp.write(bs4)
    number_list = []
    for i in  num_list:
        num_str = ''
        for j in i:
           try:
               nuber = orc(j,base_info,xue_bs4)
               # print(f'识别的数字为： {nuber}')
               # print(f'识别的数字为： {type(nuber)}')
           except Exception as e:
               print(f'错误信息： {e}')
               nuber = orc(j,base_info,xue_bs4)

           num_str += nuber
        # print(f'num_str : {num_str}')
        number_list.append(int(num_str))

    print(f'number_list : {number_list}')

    return number_list



def showimg(img, isgray=False):
  plt.axis("off")
  if isgray == True:
    plt.imshow(img, cmap='gray')
  else:
    plt.imshow(img)
  plt.show()

def move(brower,ActionChains):
    # ActionChains(brower).click_and_hold(slider).perform()
    time.sleep(3)
    # 进入ifram  获取滑块验证码图片
    brower.switch_to.frame('tcaptcha_iframe')
    for x in [get_track(i) for i in [199,202,205,210,215,220]]:
        try:
            slider = brower.find_element_by_id('tcaptcha_drag_thumb')
            ActionChains(brower).click_and_hold(slider).perform()
        except:
            print('节点错误——关掉网页准备重启程序')
            brower.quit()
            os._exit(0)
        for j in x:
            ActionChains(brower).move_by_offset(xoffset=j, yoffset=0).perform()

        ActionChains(brower).release().perform()
        time.sleep(5)
        try:
            brower.find_element_by_xpath('//div[@class="col-md-1"]')
            print('滑块成功')
            return True
        except Exception as e:
            print(f'滑块失败重试')
    print('滑块失败__退出')
    brower.quit()
    os._exit(0)

def get_track(distance):      # distance为传入的总距离
    # 移动轨迹
    track=[]
    # 当前位移
    current=0
    # 减速阈值
    mid=distance*4/5
    # 计算间隔
    t=0.1
    # 初速度
    v=100

    while current<distance:
        if current<mid:
            # 加速度为2
            a=30
        else:
            # 加速度为-2
            a=-3
        v0=v
        # 当前速度
        v=v0+a*t
        # 移动距离
        move=v0*t+1/2*a*t*t
        # 当前位移
        current+=move
        # 加入轨迹
        track.append(round(move))
    return track

# from  selenium import webdriver
# from selenium.webdriver import ActionChains
# options = webdriver.ChromeOptions()
# options.debugger_address = '127.0.0.1:9529'
# brower = webdriver.Chrome(options=options)
#
# move(brower,ActionChains)
# font_switch_2()